from math import exp, factorial, pi, sqrt


fits_in_64_bits = [
    1,
    1,
    2,
    6,
    24,
    120,
    720,
    5040,
    40320,
    362880,
    3628800,
    39916800,
    479001600,
    6227020800,
    87178291200,
    1307674368000,
    20922789888000,
    355687428096000,
    6402373705728000,
    121645100408832000,
    2432902008176640000,
]
# print(len(fits_in_64_bits))

def factorial_builtin(x):
    return factorial(x)

def factorial_fallback(x):
    if not isinstance(x, int):
        raise RuntimeError
    elif x < 0:
        raise RuntimeError
    elif x < 21:
        return fits_in_64_bits[x]
    return factorial(x)


def factorial_onlylookup(x):
    return fits_in_64_bits[x]


def stirling(n):
    return int(sqrt((2 * n + (1 / 3)) * pi) * (n ** n) * exp(-n))


print(factorial_builtin(19))
print(stirling(19))

print("factorial_builtin(19)")
%timeit factorial_builtin(19)
print("factorial_fallback(19)")
%timeit factorial_fallback(19)
print("stirling(19)")
%timeit stirling(19)
print("factorial_onlylookup(19)")
%timeit factorial_onlylookup(19)
print("factorial_builtin(30)")
%timeit factorial_builtin(30)
print("factorial_fallback(30)")
%timeit factorial_fallback(30)
print("stirling(30)")
%timeit stirling(30)
